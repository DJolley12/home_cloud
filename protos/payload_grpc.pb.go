// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: protos/payload.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PayloadClient is the client API for Payload service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PayloadClient interface {
	ReceivePayload(ctx context.Context, opts ...grpc.CallOption) (Payload_ReceivePayloadClient, error)
	SendPayload(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (Payload_SendPayloadClient, error)
}

type payloadClient struct {
	cc grpc.ClientConnInterface
}

func NewPayloadClient(cc grpc.ClientConnInterface) PayloadClient {
	return &payloadClient{cc}
}

func (c *payloadClient) ReceivePayload(ctx context.Context, opts ...grpc.CallOption) (Payload_ReceivePayloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &Payload_ServiceDesc.Streams[0], "/Payload/ReceivePayload", opts...)
	if err != nil {
		return nil, err
	}
	x := &payloadReceivePayloadClient{stream}
	return x, nil
}

type Payload_ReceivePayloadClient interface {
	Send(*DataChunk) error
	CloseAndRecv() (*UploadResult, error)
	grpc.ClientStream
}

type payloadReceivePayloadClient struct {
	grpc.ClientStream
}

func (x *payloadReceivePayloadClient) Send(m *DataChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *payloadReceivePayloadClient) CloseAndRecv() (*UploadResult, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *payloadClient) SendPayload(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (Payload_SendPayloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &Payload_ServiceDesc.Streams[1], "/Payload/SendPayload", opts...)
	if err != nil {
		return nil, err
	}
	x := &payloadSendPayloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Payload_SendPayloadClient interface {
	Recv() (*DataChunk, error)
	grpc.ClientStream
}

type payloadSendPayloadClient struct {
	grpc.ClientStream
}

func (x *payloadSendPayloadClient) Recv() (*DataChunk, error) {
	m := new(DataChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PayloadServer is the server API for Payload service.
// All implementations must embed UnimplementedPayloadServer
// for forward compatibility
type PayloadServer interface {
	ReceivePayload(Payload_ReceivePayloadServer) error
	SendPayload(*DownloadRequest, Payload_SendPayloadServer) error
	mustEmbedUnimplementedPayloadServer()
}

// UnimplementedPayloadServer must be embedded to have forward compatible implementations.
type UnimplementedPayloadServer struct {
}

func (UnimplementedPayloadServer) ReceivePayload(Payload_ReceivePayloadServer) error {
	return status.Errorf(codes.Unimplemented, "method ReceivePayload not implemented")
}
func (UnimplementedPayloadServer) SendPayload(*DownloadRequest, Payload_SendPayloadServer) error {
	return status.Errorf(codes.Unimplemented, "method SendPayload not implemented")
}
func (UnimplementedPayloadServer) mustEmbedUnimplementedPayloadServer() {}

// UnsafePayloadServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PayloadServer will
// result in compilation errors.
type UnsafePayloadServer interface {
	mustEmbedUnimplementedPayloadServer()
}

func RegisterPayloadServer(s grpc.ServiceRegistrar, srv PayloadServer) {
	s.RegisterService(&Payload_ServiceDesc, srv)
}

func _Payload_ReceivePayload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PayloadServer).ReceivePayload(&payloadReceivePayloadServer{stream})
}

type Payload_ReceivePayloadServer interface {
	SendAndClose(*UploadResult) error
	Recv() (*DataChunk, error)
	grpc.ServerStream
}

type payloadReceivePayloadServer struct {
	grpc.ServerStream
}

func (x *payloadReceivePayloadServer) SendAndClose(m *UploadResult) error {
	return x.ServerStream.SendMsg(m)
}

func (x *payloadReceivePayloadServer) Recv() (*DataChunk, error) {
	m := new(DataChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Payload_SendPayload_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PayloadServer).SendPayload(m, &payloadSendPayloadServer{stream})
}

type Payload_SendPayloadServer interface {
	Send(*DataChunk) error
	grpc.ServerStream
}

type payloadSendPayloadServer struct {
	grpc.ServerStream
}

func (x *payloadSendPayloadServer) Send(m *DataChunk) error {
	return x.ServerStream.SendMsg(m)
}

// Payload_ServiceDesc is the grpc.ServiceDesc for Payload service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Payload_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Payload",
	HandlerType: (*PayloadServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReceivePayload",
			Handler:       _Payload_ReceivePayload_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SendPayload",
			Handler:       _Payload_SendPayload_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/payload.proto",
}
